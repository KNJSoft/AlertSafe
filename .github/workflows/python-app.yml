# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: AlertSafe

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-scapy
        sudo apt-get install -y libpcap-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov numpy scikit-learn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82,F841 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test Network Interface Detection
      run: |
        python -c "
        from NetworkInterfaceMonitor import NetworkInterfaceMonitor
        monitor = NetworkInterfaceMonitor()
        interfaces = monitor.get_active_interfaces()
        assert len(interfaces) > 0, 'No network interfaces detected'
        print(f'Detected interfaces: {interfaces}')"

    - name: Test Threat Detection
      run: |
        python -c "
        from DetectionEngine import DetectionEngine
        from scapy.all import IP, TCP
        
        # Test data
        test_features = {
            'packet_size': 64,
            'flow_duration': 1.0,
            'packet_rate': 10.0,
            'byte_rate': 1000.0,
            'tcp_flags': 2,  # SYN flag
            'window_size': 65535,
            'protocol': 6  # TCP
        }
        
        engine = DetectionEngine()
        threats = engine.detect_threats(test_features)
        print(f'Detected threats: {threats}')"

    - name: Test Performance
      run: |
        python -c "
        import time
        from DetectionEngine import DetectionEngine
        from scapy.all import IP, TCP
        
        # Test performance with 1000 packets
        engine = DetectionEngine()
        start_time = time.time()
        
        for _ in range(1000):
            test_features = {
                'packet_size': 64,
                'flow_duration': 1.0,
                'packet_rate': 10.0,
                'byte_rate': 1000.0,
                'tcp_flags': 2,
                'window_size': 65535,
                'protocol': 6
            }
            engine.detect_threats(test_features)
        
        end_time = time.time()
        print(f'Processed 1000 packets in {end_time - start_time:.2f} seconds')"

    - name: Run pytest
      run: |
        python -m pytest -v
